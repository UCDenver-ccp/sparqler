;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name matsu_util, :imports nil, :requires {string clojure.string, clojure.string clojure.string}, :uses nil, :defs {before2 {:name matsu_util/before2, :file "src/cljstest/matsu_util.cljc", :line 14, :column 1, :end-line 14, :end-column 13, :test true, :meta {:file "/Users/dcmcshan/Clones/sparqler/src/cljstest/matsu_util.cljc", :line 14, :column 6, :end-line 14, :end-column 13}}, before {:name matsu_util/before, :file "src/cljstest/matsu_util.cljc", :line 15, :column 1, :end-line 15, :end-column 12, :test true, :meta {:file "/Users/dcmcshan/Clones/sparqler/src/cljstest/matsu_util.cljc", :line 15, :column 6, :end-line 15, :end-column 12}}, after {:name matsu_util/after, :file "src/cljstest/matsu_util.cljc", :line 16, :column 1, :end-line 16, :end-column 11, :test true, :meta {:file "/Users/dcmcshan/Clones/sparqler/src/cljstest/matsu_util.cljc", :line 16, :column 6, :end-line 16, :end-column 11}}, both {:name matsu_util/both, :file "src/cljstest/matsu_util.cljc", :line 17, :column 1, :end-line 17, :end-column 10, :test true, :meta {:file "/Users/dcmcshan/Clones/sparqler/src/cljstest/matsu_util.cljc", :line 17, :column 6, :end-line 17, :end-column 10}}, insert-newlines {:protocol-inline nil, :meta {:file "/Users/dcmcshan/Clones/sparqler/src/cljstest/matsu_util.cljc", :line 19, :column 7, :end-line 19, :end-column 22, :arglists (quote ([s])), :doc "Insert newline before and after certain SPARQL keywords and syntatic signifiers."}, :name matsu_util/insert-newlines, :variadic false, :file "src/cljstest/matsu_util.cljc", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Insert newline before and after certain SPARQL keywords and syntatic signifiers.", :test true}, insert-indentation {:protocol-inline nil, :meta {:file "/Users/dcmcshan/Clones/sparqler/src/cljstest/matsu_util.cljc", :line 32, :column 7, :end-line 32, :end-column 25, :arglists (quote ([s])), :doc "Indents lines following brackets and lines following semicolon (same subject)"}, :name matsu_util/insert-indentation, :variadic false, :file "src/cljstest/matsu_util.cljc", :end-column 25, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Indents lines following brackets and lines following semicolon (same subject)", :test true}, pprint {:protocol-inline nil, :meta {:file "/Users/dcmcshan/Clones/sparqler/src/cljstest/matsu_util.cljc", :line 65, :column 7, :end-line 65, :end-column 13, :arglists (quote ([s])), :doc "A very crude regex-based SPARQL pretty-printer."}, :name matsu_util/pprint, :variadic false, :file "src/cljstest/matsu_util.cljc", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "A very crude regex-based SPARQL pretty-printer.", :test true}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}