;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name matsu_core, :imports nil, :requires nil, :uses nil, :defs {empty-query {:protocol-inline nil, :meta {:file "/Users/dcmcshan/Clones/sparqler/src/cljstest/matsu_core.cljc", :line 9, :column 7, :end-line 9, :end-column 18, :arglists (quote ([]))}, :name matsu_core/empty-query, :variadic false, :file "src/cljstest/matsu_core.cljc", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, prefixes {:name matsu_core/prefixes, :file "src/cljstest/matsu_core.cljc", :line 38, :column 1, :end-line 38, :end-column 14, :test true, :meta {:file "/Users/dcmcshan/Clones/sparqler/src/cljstest/matsu_core.cljc", :line 38, :column 6, :end-line 38, :end-column 14}}, register-namespaces {:protocol-inline nil, :meta {:file "/Users/dcmcshan/Clones/sparqler/src/cljstest/matsu_core.cljc", :line 45, :column 7, :end-line 45, :end-column 26, :arglists (quote ([m]))}, :name matsu_core/register-namespaces, :variadic false, :file "src/cljstest/matsu_core.cljc", :end-column 26, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}, ns-or-error {:protocol-inline nil, :meta {:file "/Users/dcmcshan/Clones/sparqler/src/cljstest/matsu_core.cljc", :line 48, :column 7, :end-line 48, :end-column 18, :arglists (quote ([k m])), :doc "Resolves prefixes. Throws an error if the namespace cannot be resolved."}, :name matsu_core/ns-or-error, :variadic false, :file "src/cljstest/matsu_core.cljc", :end-column 18, :method-params ([k m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k m])), :doc "Resolves prefixes. Throws an error if the namespace cannot be resolved.", :test true}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:having :insert :where :local-prefixes :limit :group-by :offset :xsd :delete :prefix :from-named :with :from :values :order-by :query-form :base :select}, :order [:having :insert :where :local-prefixes :limit :group-by :offset :delete :prefix :from-named :with :from :values :order-by :query-form :base :select :xsd]}, :doc "Matsu core datastructures"}